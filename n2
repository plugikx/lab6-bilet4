import numpy as np

def F(x):
    x1, x2 = x
    return 7*x1**2 + 2*x1*x2 + 5*x2**2 + x1 - 10*x2

def coordinate_descent(F, initial_guess, epsilon=1e-5, max_iter=1000):
    x = initial_guess

    for _ in range(max_iter):
        x_new = np.copy(x)
        for i in range(len(x)):
            x_i = np.copy(x_new)
            x_i[i] = x_i[i] + epsilon
            if F(x_i) < F(x_new):
                x_new = x_i
            else:
                x_i = np.copy(x_new)
                x_i[i] = x_i[i] - epsilon
                if F(x_i) < F(x_new):
                    x_new = x_i

        if np.linalg.norm(x_new - x) < epsilon:
            break

        x = x_new

    return x

initial_guess = np.array([0, 0])
optimum = coordinate_descent(F, initial_guess)

print("Optimal values:", optimum)
print("Optimal objective value:", F(optimum))
